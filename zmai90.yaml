substitutions:
  name: "ZMAi-90"
  node_name: zmai90

  # ZMAi-90 TuyaMCU datapoints
  dp_switch: "1"
  dp_total: "17"
  dp_power: "19"
  dp_current: "18"
  dp_voltage: "20"

esphome:
  name: $node_name
  project:
    name: "dentra.zmai90v2"
    version: "2022.6.0"

esp8266:
  board: esp01_1m
  restore_from_flash: true

preferences:
  flash_write_interval: 30min

external_components:
  - source: github://dentra/esphome-components

backup:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$name Fallback Hotspot"
    password: !secret wifi_ap_password
  fast_connect: true

captive_portal:

# Enable Home Assistant API
api:

# Make sure you can upload new firmware OTA
ota:

web_server:

time:
  platform: homeassistant
  id: g_time
# Uncomment next 4 lines if you want to force update values from Tuya MCU every 10 seconds
#    on_time:
#      seconds: 9,19,29,39,49,59
#      then:
#        - uart.write: [0x55, 0xaa, 0x00, 0x08, 0x00, 0x00, 0x07]

# Enable logging
logger:
  # Make sure logging is not using the serial port
  baud_rate: 0

uart:
  rx_pin: RX
  tx_pin: TX
  baud_rate: 9600

# Register the Tuya MCU connection
tuya:
  time_id: g_time

switch:
  # Uncomment next 5 lines to expose main switch to HA
  #  - platform: "tuya"
  #    id: sw_power
  #    name: "$name"
  #    switch_datapoint: $dp_switch
  #    icon: "mdi:power"
  # Uncomment next 5 lines if you want a switch to query the device working status by forces update values from Tuya MCU
  # - platform: "uart"
  #   id: sw_tuya_query_status
  #   data: [0x55, 0xaa, 0x00, 0x08, 0x00, 0x00, 0x07]
  #   name: "$name Force update"
  #   icon: mdi:reload

text_sensor:
  - platform: "template"
    id: current_tariff
    name: "$name Current Tariff"
    icon: "mdi:theme-light-dark"
    entity_category: diagnostic

# Create sensors
sensor:
  # total
  - platform: "tuya"
    id: total
    name: "$name Energy Total"
    sensor_datapoint: $dp_total
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    icon: "mdi:sigma"
    device_class: "energy"
    # i am not interesting in total but tariffs, so you can comment or set it to false if you want internal total sensor
    internal: true
    state_class: total_increasing

  # active power
  - platform: "tuya"
    id: power
    name: "$name Active Power"
    sensor_datapoint: $dp_power
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "W"
    icon: "mdi:flash"
    device_class: "power"
    state_class: measurement

  # current
  - platform: "tuya"
    id: current
    name: "${name} Current"
    sensor_datapoint: $dp_current
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "A"
    icon: "mdi:current-ac"
    device_class: "current"
    state_class: measurement

  # voltage
  - platform: "tuya"
    id: voltage
    name: "$name Voltage"
    sensor_datapoint: $dp_voltage
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    device_class: "voltage"
    state_class: measurement

  - platform: "energy_monitoring"
    id: mon
    power: power
    voltage: voltage
    current: current
    apparent_power:
      name: "$name Apparent Power"
      filters:
        - throttle_average: 60s
        - filter_out: nan
    reactive_power:
      name: "$name Reactive Power"
      filters:
        - throttle_average: 60s
        - filter_out: nan
    power_factor:
      name: "$name Power Factor"
      filters:
        - throttle_average: 60s
        - filter_out: nan

  - platform: "energy_statistics"
    id: stat
    total: total
    energy_today:
      id: today
      name: "$name Energy Today"

  - platform: "energy_tariffs"
    id: tariffs
    total: total
    time_offset:
      name: "$name Time Offset"
    tariffs:
      - name: "$name Peak Tariff"
        id: peak
        icon: "mdi:weather-sunny"
        service: peak_set
      - name: "$name Off-Peak Tariff"
        id: offpeak
        icon: "mdi:weather-night"
        time: "23:00-07:00"
        service: offpeak_set
    on_tariff:
      lambda: |-
        if (x == id(peak))
          id(current_tariff).publish_state("peak");
        else if (x == id(offpeak))
          id(current_tariff).publish_state("off-peak");
        else // should be never happen
          id(current_tariff).publish_state("unknown");
    on_before_tariff:
      - uart.write: [0x55, 0xaa, 0x00, 0x08, 0x00, 0x00, 0x07]

  - platform: uptime
    name: "$name Uptime"
    device_class: duration

  - platform: wifi_signal
    name: "$name WiFi Signal"
